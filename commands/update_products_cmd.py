import re
import tqdm
import typer
from bs4 import BeautifulSoup
from database import init_db
from utils import fetch_page
from models import CompetitorProduct
from sqlalchemy.orm import Session

app = typer.Typer(help="–ö–æ–º–∞–Ω–¥–∏ –¥–ª—è –∑–∞–ø—É—Å–∫—É —Å–∫—Ä–µ–π–ø–µ—Ä–∞")

@app.command("run")
def update_products():
    """–û–Ω–æ–≤–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—É–ø–ª–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ —É –ë–î"""
    with init_db() as session:
        products = session.query(CompetitorProduct).filter(CompetitorProduct.url.isnot(None)).all()
        if not products:
            typer.echo("‚ö†Ô∏è –ù–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É —É –ë–î.")
            raise typer.Exit()

        typer.echo(f"üìå –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—É–ø–ª–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤: {len(products)} —à—Ç.")
        updated_count = 0

        for product in tqdm(products, desc="–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤", unit="product"):
            try:
                html = fetch_page("https://prom.ua" + product.url)
                soup = BeautifulSoup(html, "html.parser")
                bought_count = get_bought_count(soup)
                category = get_category(soup)
                price = get_price(soup)
                if bought_count is not None:
                    product.bought_count = bought_count

                if category:
                    product.category = category
                
                if price:
                    product.price = price
                    
                updated_count += 1
                # typer.echo(f"‚úÖ {product.name} (ID: {product.id}) ‚Üí {bought_count}")
                
            except Exception as e:
                typer.echo(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑ {product.id}: {e}")

        session.commit()
        typer.echo(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ {updated_count}/{len(products)} –ø—Ä–æ–¥—É–∫—Ç—ñ–≤.")


def get_bought_count(soup: BeautifulSoup):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—É–ø–ª–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –∑ HTML-—Å—Ç–æ—Ä—ñ–Ω–∫–∏"""
    order_counter = soup.select_one("[data-qaid='order_counter']")
    if not order_counter:
        return None

    match = re.search(r'\d+', order_counter.get_text(strip=True))
    return int(match.group()) if match else 0

def get_price(soup: BeautifulSoup):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É –∑ HTML-—Å—Ç–æ—Ä—ñ–Ω–∫–∏"""
    element = soup.select_one("[data-qaid='main_product_info'] [data-qaid='product_price'] span")
    if not element:
        return None

    text = element.get_text(strip=True)

    # –í–∏—Ç—è–≥—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏, –∫—Ä–∞–ø–∫–∏ —Ç–∞ –∫–æ–º–∏
    cleaned = re.sub(r"[^\d.,]", "", text)

    # –ó–∞–º—ñ–Ω—é—î–º–æ –∫–æ–º—É –Ω–∞ –∫—Ä–∞–ø–∫—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    cleaned = cleaned.replace(",", ".")
    
    try:
        return float(cleaned)
    except ValueError:
        return None

def get_category(soup: BeautifulSoup) -> str:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É –∑ breadcrumb"""
    categories = soup.select("[data-qaid='breadcrumbs_seo_item']")
    if not categories:
        return None
    return categories[-1].get_text(strip=True)
